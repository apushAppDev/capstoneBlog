Project Design Plan

Problem to be solved:  How to achieve real-world experience working with a client to develop software to meet their needs*.
and/or
Driving  Question: How does client interaction impact the design process for a software application?


*the needs of the client, in this situation, are a software application that will help drive students to study more and learn independently in conjunction with the AP US History curriculum.


Goals/Learning Targets
Content:
Graphic User Interface (GUI) development
User account management
Implementing Administrator-User relationships, permissions, etc
Data analytics
Database integration
Skills:
Client interaction
The ability to apply the content knowledge listed above to a real project
Setting up and running a database
Managing a large, long-term project with a small group.



Anticipated Outcomes/Products
The Gawleflower Project (teaching aid?)
Being able to launch the product with success in multiple classrooms, allowing multiple classes to work with ‘overlapping’ students.



Potential Audiences:
Teachers and classrooms who would be interested in exploring whether or not competition could help to improve student success.
Teachers and classrooms who would be interested in automated content review, automated grading, etc.
Students studying for exams in a class that uses the software.
 
 
 
Prior Knowledge (Consider/describe content knowledge and hands on experience):
Content and hands-on experience:
Web Development (HTML, CSS)
SQL Servers and server interactions
Javascript, PHP
Project work for other Computer Science classes  



Anticipated Obstacles & Challenges:
Server space
Bugs that cause us to have to have to rework the design
i.e. designs plans not being as feasible as we once thought because “piece of code x” won’t interact with “piece of code y”
Client misunderstanding scope, direction
Client not communicating clearly



Plan for Completion
Use “Agile Flow Methodology” to complete tasks
Work in “sprints”, which are small chunks of work which are isolated for efficiency
Meet with client(s) before and after each sprint to discuss plan of attack
Develop a faux front-end
Demonstrate features to clients before writing extensive code
Avoid wasting time and create a better product
Conduct regular client meetings
Discuss progress
Discuss next steps
Discuss changes to scope(within limits)
Create multiple releases
Make a baseline product to roll out for “focus groups”/”beta testers”
Make revisions, changes suggested by users to improve experience and approved by client
Repeat ad necessitatem

Tasks:
Create end product with all designated features
Keep record of all interactions with designated client for purpose of understand impact on project progress and completion.

Specific Resources (digital, print, human, other):
This is a list of all ‘features’ that must exist within the application for the product to be considered ‘complete’, or simply just ready to use.
1.	Gawleflower
1.1. Teacher Dashboard
1.1.1. Leaderboard
1.1.1.1 View entire leaderboard
1.1.1.2 See scores
1.1.1.3 See noncompliant vs. incorrect
1.1.2.	Analytics
		1.1.2.1 Google Analytics Framework Analysis of
			1.1.2.1.1 Completion 
			1.1.2.1.2 Correct (overall)
			1.1.2.1.3 Wrong (overall)
			1.1.2.1.4 Correct/Wrong (Average per Question Group)
			1.1.2.1.5 Correct/Wrong (Average per Question)
1.1.2.2 Optional specific account analysis (Display account details for given quiz)
			
1.1.3 Quiz/Homework assignment
		1.1.3.1 Creation UI
			1.1.3.2.0 Define as Test/Quiz/Homework
			1.1.3.1.1 Number of questions 
			1.1.3.1.2 Wrong Answers
			1.1.3.1.3 Point Values 
			1.1.3.1.4 Concept Grouping/Tagging 
			1.1.3.1.5 Assign to group 
			1.1.3.1.6 Optional set due date
			1.1.3.1.7 Exit and save
		1.1.3.2 Completion Checker
1.1.3.2.0 on completion (by all students in assignment) display “Assignment ____ Completed” on teacher dash
			1.1.3.2.1 On check completion, reward points 
			1.1.3.2.2 Apply point value changes to leaderboard
	1.1.3.2.3 Check for completion and assign 0 points at given time (see 1.1.3.1.6)
		1.1.4 Admin Access Rights
			1.1.4.1 Create student account
1.1.4.1.1 Permissions 
				1.1.4.1.2 Class
1.1.4.1.3 Specific permissions/aid for ALL Quizzes/Tests (extra time). Inherit from quiz object
			1.1.4.2 Modify student account 
				1.1.4.2.1 Permissions 
				1.1.4.2.2 Class
				1.1.4.2.3 Specific permissions/aid for specific quiz.


1.2.	Student Dashboard
1.2.1.	Leaderboard
		1.2.1.1 View only top 5
		1.2.1.2 View your placement
		1.2.1.3 View top 5 point values
1.2.2.	Take Quiz/Do Homework
		1.2.2.1 View open assignments
		1.2.2.2 View finished/late assignments
		1.2.2.3 See quizzes/tests/homework
		1.2.2.4 Do homework/tests/quizzes
1.3. 	Server Data/Hosting 
1.3.1.	Github.io hosting 
		1.3.1.1 Hosting on a Github.io site 
		1.3.1.2 Ruby on Rails or Sinatra on top of HTML5 framework AJAX calls or Angular JS
		1.3.1.3 Responsive?


1.3.2.	Server for content holding
1.3.2.1 Auto-maintaining software
		1.3.2.1.1 No need for software maintenance 
1.3.2.2 Functional hosting for all tests/quizzes/homework 
		1.3.2.2.1 Hold all old quizzes 
		1.3.2.2.2 Retrieve and remove non applicable files 
1.3.2.4 

Resources:
Stack Overflow & similar forums
W3 Schools
Mr. Barron
Developer Documentation for all languages used(ex: x, x)
